from aiogram import html, types
from aiogram.fsm.context import FSMContext

from qa_bot.data import config
from qa_bot.keyboards.inline.answer import make_start_answer_keyboard
from qa_bot.keyboards.inline.reactions import make_reaction_keyboard
from qa_bot.utils.api.auto_responder_api import auto_responder_api
from qa_bot.utils.enums import TypeOfMessages


async def new_msg_in_group(msg: types.Message) -> None:
    if msg.from_user is None:
        return

    question_text = msg.text
    question_msg_id = msg.message_id
    admin_chat_id = config.ADMIN_CHAT_ID
    username_url = f'<a href="tg://user?id={msg.from_user.id}">{html.quote(msg.from_user.full_name)}</a>'

    message_type, result = await auto_responder_api.get_answer_to_question(
        question_text
    )
    if message_type == TypeOfMessages.IS_Q_WITH_ANSWER:
        answer_text = result
        rkb = make_reaction_keyboard(
            admin_chat_id=admin_chat_id, q_msg_id=question_msg_id
        )

        response_message = [
            "–û—Ç–≤–µ—Ç –Ω–∞ –í–∞—à –≤–æ–ø—Ä–æ—Å:",
            f"<code>{answer_text}</code>",
            "\n–ü–æ–º–æ–≥ –ª–∏ –≤–∞–º –æ—Ç–≤–µ—Ç?",
            "üëç ‚Äì –î–∞",
            "üëé ‚Äì –ù–µ—Ç",
        ]

        await msg.reply(text="\n".join(response_message), reply_markup=rkb)

    elif message_type == TypeOfMessages.IS_Q_WITHOUT_ANSWER:
        user_question_message = [
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username_url} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –Ω–∞—à–µ–ª—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ:",
            f"<code>{html.quote(msg.text)}</code>",
        ]
        rkb = make_start_answer_keyboard(
            support_chat_id=msg.chat.id, q_msg_id=msg.message_id
        )
        await msg.reply(
            "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –∞–¥–º–∏–Ω –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
        )
        await msg.bot.send_message(
            chat_id=admin_chat_id,
            text="\n".join(user_question_message),
            reply_markup=rkb,
        )


async def last_question(msg: types.Message, state: FSMContext):
    admin_chat_id = config.ADMIN_CHAT_ID
    username_url = f'<a href="tg://user?id={msg.from_user.id}">{html.quote(msg.from_user.full_name)}</a>'
    user_last_question_message = [
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username_url} –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –æ—Ç–≤–µ—Ç. –û–Ω –∑–∞–¥–∞–ª –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å:",
        f"<code>{html.quote(msg.text)}</code>",
    ]
    rkb = make_start_answer_keyboard(
        support_chat_id=msg.chat.id, q_msg_id=msg.message_id
    )
    await msg.reply(
        "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –∞–¥–º–∏–Ω –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è"
    )
    await msg.bot.send_message(
        chat_id=admin_chat_id,
        text="\n".join(user_last_question_message),
        reply_markup=rkb,
    )
    await state.clear()
